" Visual Tweaks {{{

filetype plugin indent on " enable filetype plugins and indentations
syntax enable             " enable syntax highlighting

" Status Line Tweakes {{{

set laststatus=2
set statusline=
set statusline +=%*\ %n\ %* " buffer number
set statusline +=%*%{&ff}%* " file format
set statusline +=%*%y%*     " file type
set statusline +=%*\ %<%F%* " full path
set statusline +=%*%m%*     " modified flag
set statusline +=%*%=%5l%*  " current line
set statusline +=%*/%L%*    " total lines
set statusline +=%*%4v\ %*  " virtual column number

" }}}

" General Tweaks {{{

colorscheme slate                                                  " colorscheme of choice
syntax match customTodo contained '\<\(TODO\|FIXME\|NOTE\|XXX\)\>' " add words for todo highlights
hi def link customTodo Todo
set number                                                         " show line numbers
set cino+=(0                                                       " align function arguments
set nowrap                                                         " stop line wrapping
set showcmd                                                        " show last entered command in bottom bar
set lazyredraw                                                     " redraw only when necessary
set showmatch                                                      " highlight matching brackets/parens
set mat=1                                                          " 1/10 of a second to blink when matching brackets
set noerrorbells                                                   " no audible bell on errors
set cursorline                                                     " highlight line (next cmd removes underline)
set hlsearch                                                       " highlight search results

" }}}

" Tabs And Whitespace {{{

set tabstop=4                                   " number of visual spaces per tab
set softtabstop=4                               " number of spaces in tab when editing
set shiftwidth=4                                " number of columns for reindent operations (<< and >>)
autocmd FileType r setlocal tabstop=2           " R-language specific formatting settings
autocmd FileType r setlocal softtabstop=2       " R-language specific formatting settings
autocmd FileType r setlocal shiftwidth=2        " R-language specific formatting settings
autocmd FileType fortran setlocal shiftwidth=3  " fortran-specific formatting settings
autocmd FileType fortran setlocal tabstop=3     " fortran-specific formatting settings
autocmd FileType fortran setlocal softtabstop=3 " fortran-specific formatting settings
autocmd FileType Rmd setlocal nospell           " dont check spelling in rmarkdown files
autocmd FileType md setlocal nospell            " dont check spelling in markdown files
autocmd FileType pandoc setlocal nospell        " dont check spelling in markdown files
set backspace=indent,eol,start                  " make backspace work like most apps
set expandtab                                   " tabs are spaces

" }}}

" }}}

" Functional Tweaks {{{

set noswapfile                 " dont create temporary swap files
set autoindent                 " keep indent from current line when starting new line
set smartindent                " make indenting logic smarter using language syntax
set ruler                      " always show the current cursor position
set incsearch                  " make search act like in modern web browsers
set autoread                   " automatically read when a file is changed externally
set regexpengine=1             " newer regular expression engine (versions 7.4+)
autocmd VimResized * :wincmd = " automatically resize scale windows when terminal is resized
if has("clipboard")
  set clipboard=unnamed        " copy to system clipboard
endif
if &diff
    set diffopt+=iwhite        " ignore whitespace in diff mode but not in standard vim
endif


" Code Folding {{{

set foldenable                                " enable code folding
set foldmethod=indent                         " fold based on language syntax
set foldlevelstart=99                         " fold level at file open (0=everything folded, 99=nothing)
set foldnestmax=99                            " maximum fold nesting
set modelines=1                               " check last line of file for a modeline so vimrc can be folded
let r_syntax_folding=1                        " allow syntax folding in the Vim-R plugin
autocmd FileType python set foldmethod=indent " overwrite pymode indent method

" }}}

" code formatting options
autocmd FileType sql setlocal formatprg=/usr/local/bin/pg_format\ -\ --keyword-case\ 2\ --function-case\ 3
autocmd FileType r setlocal formatprg=/usr/bin/python\ $R_LIBS_USER/rfmt/python/rfmt.py\ \--margin1\ 120\ --indent\ 2\ --space_arg_eq\ False
autocmd FileType fortran setlocal formatprg=/usr/local/bin/fprettify\ --silent\ -
autocmd FileType python setlocal formatprg=/usr/local/bin/autopep8\ -
autocmd FileType cpp setlocal formatprg=/usr/local/bin/clang-format\ -style=file\ -

" }}}

" Key Mappings {{{

" General Mappings {{{

" refactoring / variable replacement
" local (scope) refactor
nmap gr gd[{V%::s/<C-R>///gc<Left><Left><Left>
autocmd FileType python nmap gr gdViM::s/<C-R>///gc<Left><Left><Left>
" global refactor
nmap gR gDVG::s/<C-R>///gc<Left><Left><Left>

" Global variable replacement
"nnoremap gR gD::%s/<C-R>///gc<left><left><left>

" shortcut to replace word by pasting before it, deleting it, and adding a space
nnoremap R Pldwi<Esc>bye

" Undo the Vim R plugin annoying underscore to arrow mapping
let vimrplugin_assign=0

" space toggles current fold
nnoremap <space> za

" visually select text entered when last in insert mode
nnoremap gV [v`]

" make the `#` key still use `n` to move forward and `N` to move backwards
nnoremap # *NN

" re-select visual block after indenting
" (normally vim will deselect and go back to normal mode)
vnoremap < <gv
vnoremap > >gv

" fast pane splitting and focus switching
nnoremap <expr><silent> \| !v:count ? "<C-W>v<C-W><Right>" : '\|'
nnoremap <expr><silent> _ !v:count ? "<C-W>s<C-W><Down>"  : '_'
nnoremap <Tab> <C-W>w
nnoremap <S-Tab> <C-W>W

" ctrl+h to turn off highlighting
nnoremap <Esc><Esc> :nohl<CR>

" easy align initializer keymap
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)

" }}}

" leader Mappings {{{

" format current file
autocmd FileType cpp nmap <leader>fmt :ClangFormat<CR>
autocmd FileType python nmap <leader>fmt :Black<CR>
nmap <leader>cf :ClangFormat<CR>
let g:black_linelength=120

" quick isolation of the currently focused file
nnoremap <leader><Esc><Esc> :only<CR>

" merge conflict resolution shortcuts
nmap <leader>dgr :diffget REMOTE \| diffupdate<CR>
nmap <leader>dgl :diffget LOCAL \| diffupdate<CR>
nmap <leader>dgb :diffget BASE \| diffupdate<CR>

" Local (within scope) variable replacement
nnoremap <leader>fr :%s/\<<C-r><C-w>\>//g<Left><Left>

" vim line diff plugin shortcuts
vnoremap <leader>ldf :Linediff<CR>
nnoremap <leader>ldr :LinediffReset<CR>

" lzz shortcut
nnoremap <leader>lzz :!lzz %<CR><CR>
nnoremap <leader>LZZ :!find `git root` \| grep \"\\.lzz\" \| xargs lzz

" git add entire current file to staged index
nnoremap <leader>ga :!git add %<CR><CR>
nnoremap <leader>gc :Gcommit<CR>
nnoremap <leader>gp :!git push<CR>
nnoremap <leader>gs :Gstatus<CR>
nnoremap <leader>gd :Gdiff<CR>

" easier grepper command accessibility
nnoremap <leader>gr :Grepper<CR>

" search for next git merge conflict
nnoremap <leader>mc /\<HEAD\>\\|<<<<\\|>>>>\\|====\\|\|\|\|\|<CR>

" easier error jumping
nnoremap <leader>ne :lne<CR>
nnoremap <leader>pe :lN<CR>

" syntastic reset shortcut
nnoremap <leader>sr :SyntasticReset<CR>
nnoremap <leader>st :SyntasticToggleMode<CR>

" }}}

" Control Key Mappings {{{

" reselct visual selection after incrementing or decrementing numbers
vnoremap <C-A> <C-A>gv
vnoremap <C-X> <C-X>gv

" toggle the nerd tree side bar file explorer menu
nnoremap <C-N> :NERDTreeToggle<CR>

" faster buffer/tab navigation
nnoremap <C-J> :b#<CR>
nnoremap <C-H> :bprevious<CR>
nnoremap <C-L> :bnext<CR>
nnoremap <C-K> :bdelete<CR>

" these extend the above similar google chrome tab switching style
nnoremap <C-1> :bfirst<CR>
nnoremap <C-2> :b2<CR>
nnoremap <C-3> :b3<CR>
nnoremap <C-4> :b4<CR>
nnoremap <C-5> :b5<CR>
nnoremap <C-6> :b6<CR>
nnoremap <C-7> :b7<CR>
nnoremap <C-8> :b8<CR>
nnoremap <C-9> :blast<CR>

" ctrl+t to access terminal
nnoremap <C-T> :shell<CR>

" }}}

" F-Key Mappings {{{

"nmap <F1> K
nmap <silent> <leader><F1> <Plug>DashSearch
nmap <silent> <leader>dd <Plug>DashSearch

autocmd FileType pandoc nnoremap <F5> :!clear; pandoc % -o %:r.pdf
            \ --verbose
            \ --listings
            \ --number-sections
            \ --table-of-contents
            \ && open %:r.pdf
            \ | <CR>

nnoremap <leader><F3> :execute ":SlimeSend1 TEST"<CR>
nnoremap <leader><F4> :execute ":SlimeSend1 BUILD"<CR>
nnoremap <leader><F5> :execute ":SlimeSend1 RUN"<CR>

autocmd FileType r nnoremap <silent> <F1> :!R -e "?<cword>"<CR>
autocmd FileType r nnoremap <F4> :execute ":SlimeSend1 build r" . bufname("%") . "')"<CR>
autocmd FileType r nnoremap <F5> :execute ":SlimeSend1 source('" . bufname("%") . "')"<CR>

autocmd FileType julia nnoremap <F5> :execute ":SlimeSend1 include(\"" . bufname("%") . "\")"<CR>

autocmd FileType cpp set keywordprg=cppman
autocmd FileType cpp nnoremap <silent> <F1> :!cppman <cword><CR>
autocmd FileType cpp nnoremap <F3> :execute ":SlimeSend1 test cpp"<CR>
autocmd FileType cpp nnoremap <F4> :execute ":SlimeSend1 build cpp"<CR>
autocmd FileType cpp nnoremap <F5> :execute ":SlimeSend1 run cpp"<CR>

autocmd FileType sh nnoremap <silent> <F1> :!man <cword><CR>
autocmd FileType sh nnoremap <F4> :execute ":SlimeSend1 ./" . bufname("%") . ""<CR>
autocmd FileType sh nnoremap <F5> :execute ":SlimeSend1 . " . bufname("%") . ""<CR>

autocmd FileType sql nnoremap <silent> <F1> :!psql postgres -c "\\h <cword>"<CR>
autocmd FileType sql nnoremap <F5> :execute ":SlimeSend1 \\i " . bufname("%") . ""<CR>

autocmd FileType python nnoremap <silent> <F1> :!ipython -c "?<cword>"<CR>
autocmd FileType python nnoremap <F3> :execute ":SlimeSend1 test python<CR>
autocmd FileType python nnoremap <F4> :execute ":SlimeSend1 build python<CR>
autocmd FileType python nnoremap <F5> :execute ":SlimeSend1 exec(open('" . bufname("%") . "').read())"<CR>

" }}}

" }}}

" Miscellaneous Preferences {{{

" lzz files interpreted as cpp files
autocmd BufNewFile,BufRead *.lzz set filetype=cpp

" }}}
" Make vim use triple bracket fold markers in vimrc
" vim:foldmethod=marker:foldlevel=0
