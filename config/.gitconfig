# NOTE: add the following to incorporate settings into user git config file (`~/.gitconfig`)
# [include]
#     path = ~/Base/config/.gitconfig

[core]
    editor = nvim
    pager = less -F -X -R
[github]
    user = dysonance
    email = jamos125@gmail.com
[pull]
    rebase = false
[diff]
    tool = nvimdiff
    #tool = vimdiff
[difftool]
    # dont ask before launching the diff tool
    prompt = false
    # abort entire diff tool session with `:cquit` or `:cq`
    trustExitCode = true
[difftool "nvimdiff"]
    # use vim as the diff tool
    cmd = nvim -d $LOCAL $REMOTE
[merge]
    tool = nvimdiff
    #tool = vimdiff
[mergetool "nvimdiff"]
    cmd = nvim -d $LOCAL $BASE $REMOTE $MERGED -c '$wincmd w' -c 'wincmd J'
[alias]
    # open current branch in bitbucket
    bb = "!f() { open $(git config remote.origin.url | sed \"s/:/\\//g\" | sed \"s/git@/https:\\/\\//g\")/branch/$(git branch | grep \\* | sed \"s/\\* //g\"); }; f"
    # amend the diff in the previous commit quickly
    cane = commit --amend --no-edit
    # show the root of the git repo directory
    root = rev-parse --show-toplevel
    # summarize git commit history
    summ = log --stat --pretty=format:'%C(bold magenta)%an%C(reset) %C(bold white)%s%C(reset) %C(bold cyan)%ar%C(reset) %C(cyan)%ad%C(reset) %C(bold yellow)%h%C(reset)'
    # visualize the flow of branches in the commit history
    flow = log --all --graph --abbrev-commit --decorate --branches --format=format:'%C(bold magenta)%an%C(reset) %C(reverse bold yellow)%D%C(reset) %C(bold white)%s%C(reset) %C(bold cyan)%ar%C(reset) %C(cyan)%ad%C(reset) %C(bold blue)%h%C(reset)'
    # save current git diff to a custom stash location
    save = "!f() { if ! [ -d chest/patch ]; then echo \"no patch directory found\"; else echo \"saving changes to chest/patch/$1.patch\" && git add . && git diff --staged > chest/patch/$1.patch && git reset --quiet . && git checkout --quiet .; fi }; f"
    # grab saved git diffs from custom stash location without removing the stash
    grab = "!f() { if ! [ -f chest/patch/$1.patch ]; then echo \"chest/patch/$1.patch not found\"; else echo \"grabbing changes from chest/patch/$1.patch\" && git apply \"chest/patch/$1.patch\"; fi }; f"
    # show verbose diagnostics to better understand git operations (useful when git lags)
    debug = "!f() { set -x; GIT_TRACE=2 GIT_CURL_VERBOSE=2 GIT_TRACE_PERFORMANCE=2 GIT_TRACE_PACK_ACCESS=2 GIT_TRACE_PACKET=2 GIT_TRACE_PACKFILE=2 GIT_TRACE_SETUP=2 GIT_TRACE_SHALLOW=2 git $@ ; set +x; }; f"
    # open all files changed from one reference to another in diff tool editor
    review = "!f() { if [ -z $1 ]; then git difftool master; else git difftool $1; fi; }; f"
    # run merges from one central branch to multiple child branches
    update = "!f() { refbranch=$(git branch | grep \\* | sed \"s/\\* //\"); branches=$@; echo \"updating $refbranch\n\"; git checkout $refbranch --quiet; git pull --quiet; for branch in ${branches[@]}; do if [ \"$branch\" != \"$refbranch\" ]; then git checkout $branch --quiet; echo \"updating $branch\"; git pull --quiet; echo \"merging $refbranch into $branch\"; git merge $refbranch --commit --quiet; if [ \"$?\" != \"0\" ]; then echo \"merge conflict on $branch\"; git reset --hard --quiet; fi; echo \"\"; fi; done; }; f"
    # get the current branch
    thisbranch = "!f() { git branch | grep \\\\* | sed \"s/\\* //g\"; }; f"
    # get all remote branches
    allbranches = "!f() { git branch -a | grep -v $(git thisbranch) | grep -v HEAD | grep origin | sed \"s/ remotes\\\\/origin\\///g\"; }; f"
    # shortcut for showing changed files
    changed = diff --name-only
    # search file contents history for file
    dig = "!f() { git log -S $1 --stat -p --pretty=format:'%C(bold magenta)%an%C(reset) %C(bold white)%s%C(reset) %C(bold cyan)%ar%C(reset) %C(cyan)%ad%C(reset) %C(bold yellow)%h%C(reset)' --decorate -- $2; }; f"
    # find and replace
    findreplace = "!f() { git grep -l \"$1\" | xargs sed -i '' -e \"s/$1/$2/g\"; }; f"
